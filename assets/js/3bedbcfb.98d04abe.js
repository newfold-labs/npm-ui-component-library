"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[8634],{8043:(e,n,t)=>{t.d(n,{A:()=>p});var o=t(6540),l=t(4848);const a={Table:({children:e,docs:n})=>{const t=[],o=()=>!!(n&&"object"==typeof n&&Object.keys(n).length>0);return(0,l.jsx)("div",{className:"props-table",children:(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Attribute"}),(0,l.jsx)("th",{children:"Type"}),(0,l.jsx)("th",{children:"Description"}),(0,l.jsx)("th",{children:"Default"})]})}),(0,l.jsxs)("tbody",{children:[!e&&!o()&&(0,l.jsx)("div",{className:"empty-props",children:"This component has no props."}),(()=>{if(o())for(const e in n)if(n.hasOwnProperty(e)){const o=n[e];o.name=e,void 0===o.type&&(o.type=[]),void 0===o.description&&(o.description=""),void 0===o.defaultValue&&(o.defaultValue=""),void 0===o.isRequired&&(o.isRequired=!1),t.push((0,l.jsx)(a.Row,{name:o.name,type:o.type,description:o.description,defaultValue:o.defaultValue,isRequired:o.isRequired},o.name))}return t})(),e]})]})})},Row:({name:e,type:n=[],description:t="-",defaultValue:a="-",isRequired:p=!1})=>{const c=()=>{let e=n;return"string"==typeof e&&(e=[e]),e.length>0?(0,l.jsx)(l.Fragment,{children:e.map((e,n)=>(0,l.jsxs)(o.Fragment,{children:[(0,l.jsx)("code",{children:e}),(0,l.jsx)("span",{children:" | "})]},n))}):(0,l.jsx)("span",{children:"-"})};return e&&"string"==typeof e?(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{className:"props-table-name-col",children:"boolean"==typeof p&&p?(0,l.jsxs)("span",{className:"required-prop",children:[e,(0,l.jsx)("sup",{children:"*"})]}):(0,l.jsx)("span",{children:e})}),(0,l.jsx)("td",{className:"props-table-types-col",children:c()}),(0,l.jsx)("td",{className:"props-table-description-col",children:t&&"string"==typeof t&&""!==t?(0,l.jsx)("span",{children:t}):(0,l.jsx)("span",{children:"-"})}),(0,l.jsx)("td",{className:"props-table-default-col",children:a&&"string"==typeof a&&""!==a&&"-"!==a?(0,l.jsx)("code",{children:a}):(0,l.jsx)("span",{children:"-"})})]}):(console.warn("From: PropsTable.Row. Invalid prop name or missing required props: name."),null)}},p=a},9306:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>m,default:()=>g,frontMatter:()=>h,metadata:()=>o,toc:()=>j});const o=JSON.parse('{"id":"elements/autocomplete","title":"Autocomplete","description":"A simple autocomplete select component.","source":"@site/docs/elements/autocomplete.mdx","sourceDirName":"elements","slug":"/elements/autocomplete","permalink":"/npm-ui-component-library/docs/elements/autocomplete","draft":false,"unlisted":false,"editUrl":"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/elements/autocomplete.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Alert","permalink":"/npm-ui-component-library/docs/elements/alert"},"next":{"title":"Badge","permalink":"/npm-ui-component-library/docs/elements/badge"}}');var l=t(4848),a=t(8453),p=t(5245),c=t(8043),i=t(6540),s=t(6715);const r=[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}],u=({label:e,selectedLabel:n="",placeholder:t="Type to autocomplete options",value:o="",nullable:a=!1})=>{const[p,c]=(0,i.useState)(o),[u,d]=(0,i.useState)(n),[h,m]=(0,i.useState)(r),x=(0,i.useRef)(!0);(0,i.useEffect)(()=>{x.current?x.current=!1:d(p?r.find(e=>e.value===p).label:"")},[p]);return(0,l.jsx)(s.A,{id:"select-autocomplete",nullable:a,onChange:c,onQueryChange:e=>{const{value:n}=e.target;if(!n)return m(r);return m(()=>{if(r.length>0)return r.filter(e=>e.label.toLowerCase().includes(n.toLowerCase()))})},placeholder:t,value:p,selectedLabel:u,label:e,children:h.map(e=>(0,l.jsx)(s.A.Option,{value:e.value,children:e.label},e.value))})};const d={id:{type:"string",description:"HTML id attribute.",isRequired:!0},value:{type:["string","number","bool"]},placeholder:{type:"string"},children:{type:"node",description:"Pass `Autocomplete.Option` components as children"},selectedLabel:{type:"string",description:"The label of the selected option."},label:{type:"string",description:"The label of the autocomplete input."},labelProps:{type:"object"},labelSuffix:{type:"node"},onChange:{type:"function",description:"Callback function that is fired when an item has been selected.",isRequired:!0},onQueryChange:{type:"function",description:"Callback function that is fired when the query changes.",isRequired:!0},className:{type:"string"},nullable:{type:"bool",description:"If true, the user can clear the selected value with `X` button."},buttonProps:{type:"object",description:"Props to be passed to the `X` button element."},clearButtonScreenReaderText:{type:"string",description:"Screen reader text for the clear button.",defaultValue:"Clear"}},h={},m="Autocomplete",x={},j=[{value:"Usage",id:"usage",level:3},{value:"Label",id:"label",level:3},{value:"Placeholder",id:"placeholder",level:3},{value:"Selected Label",id:"selected-label",level:3},{value:"Nullable",id:"nullable",level:3},{value:"onChange",id:"onchange",level:3},{value:"onQueryChange",id:"onquerychange",level:3},{value:"Props",id:"props",level:3}];function b(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return c.A||A("PropsTable",!1),c.A.Table||A("PropsTable.Table",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"autocomplete",children:"Autocomplete"})}),"\n",(0,l.jsx)(n.p,{children:"A simple autocomplete select component."}),"\n",(0,l.jsx)(p.A,{children:(0,l.jsx)(u,{})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'import { Autocomplete } from "@newfold/ui-component-library";\n\n<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"label",children:"Label"}),"\n",(0,l.jsxs)(n.p,{children:["An example with a label using ",(0,l.jsx)(n.code,{children:"label"})," prop."]}),"\n",(0,l.jsx)(p.A,{children:(0,l.jsx)(u,{label:"Select an Option"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n    label="Select an Option"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"placeholder",children:"Placeholder"}),"\n",(0,l.jsxs)(n.p,{children:["An example with placeholder using ",(0,l.jsx)(n.code,{children:"placeholder"})," prop."]}),"\n",(0,l.jsx)(p.A,{children:(0,l.jsx)(u,{label:"Select an Option",placeholder:"A custom placeholder"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="A custom placeholder"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"selected-label",children:"Selected Label"}),"\n",(0,l.jsxs)(n.p,{children:["An example with default value using ",(0,l.jsx)(n.code,{children:"selectedLabel"})," prop."]}),"\n",(0,l.jsx)(p.A,{children:(0,l.jsx)(u,{label:"Select an Option",placeholder:"A custom placeholder",selectedLabel:"Option 2",value:"2"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value="2"\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Option 2"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"nullable",children:"Nullable"}),"\n",(0,l.jsxs)(n.p,{children:["Allow empty values with reset button ",(0,l.jsx)(n.code,{children:"X"})," or deleting the option and clicking outside the field."]}),"\n",(0,l.jsx)(p.A,{children:(0,l.jsx)(u,{label:"Select an Option",placeholder:"Type to autocomplete options",value:"2",selectedLabel:"Option 2",nullable:!0})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"onchange",children:"onChange"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"onChange"})," prop is a function that will be called when the value of the ",(0,l.jsx)(n.code,{children:"Autocomplete"})," component changes.\nThe function will receive the new value of the ",(0,l.jsx)(n.code,{children:"Autocomplete"})," component as a parameter."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={new_val => console.log(new_val)}\n    onQueryChange={handleQueryChange}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"onquerychange",children:"onQueryChange"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"onQueryChange"})," prop is a function that will be called when the query of the ",(0,l.jsx)(n.code,{children:"Autocomplete"})," component changes.\nThe function will receive the new query event of the ",(0,l.jsx)(n.code,{children:"Autocomplete"})," component as a parameter."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Autocomplete\n    id="autocomplete-input"\n    onChange={(new_val) => console.log(new_val)}\n    onQueryChange={(event) => console.log(event.target.value)}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,l.jsx)(c.A.Table,{docs:d})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(b,{...e})}):b(e)}function A(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);