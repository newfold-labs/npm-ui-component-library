"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[9163],{1330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>S,contentTitle:()=>g,default:()=>N,frontMatter:()=>O,metadata:()=>k,toc:()=>y});var l=t(7462),a=t(7294),o=t(3905),i=t(2504),s=t(1629),p=t(9075);const d=e=>{let{id:n,label:t,disabled:l=!1,validation:o}=e;const[i,s]=(0,a.useState)(1);return a.createElement(p.Z,{id:n,onChange:e=>{s(e)},value:i,selectedLabel:`Option ${i}`,label:t,disabled:l,validation:o},a.createElement(p.Z.Option,{label:"Option 1",value:"1"}),a.createElement(p.Z.Option,{label:"Option 2",value:"2"}),a.createElement(p.Z.Option,{label:"Option 3",value:"3"}),a.createElement(p.Z.Option,{label:"Option 4",value:"4"}))},c={toc:[{value:"1. Options as Children",id:"1-options-as-children",level:4},{value:"2. Options as Array",id:"2-options-as-array",level:4}]},r="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(r,(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"1-options-as-children"},"1. Options as Children"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"childrern")," prop to pass in the options by utilizing ",(0,o.kt)("inlineCode",{parentName:"p"},"Select.Option")," component.\nIn this case changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedLabel")," should be done manually in the ",(0,o.kt)("inlineCode",{parentName:"p"},"handleChange")," function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'const [selectedVal, setSelectedVal] = useState(1);\n\nconst handleChange = (val) => {\n    setSelectedVal(val);\n};\n\n<Select\n    id=\'select-demo-children\'\n    onChange={handleChange}\n    value={selectedVal}\n    selectedLabel={`Option ${selectedVal}`}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("h4",{id:"2-options-as-array"},"2. Options as Array"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," prop to pass in the options as an array of objects.\nIn this case, displayed ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedLabel")," will be updated automatically on change."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const [selectedVal, setSelectedVal] = useState(1);\n\nconst handleChange = (val) => {\n    setSelectedVal(val);\n};\n\n<Select\n    id='select-demo-array'\n    onChange={handleChange}\n    value={selectedVal}\n    options={[\n      {\n        label: 'Option 1',\n        value: '1'\n      },\n      {\n        label: 'Option 2',\n        value: '2'\n      },\n      {\n        label: 'Option 3',\n        value: '3'\n      },\n      {\n        label: 'Option 4',\n        value: '4'\n      }\n    ]}\n/>\n")))}u.isMDXComponent=!0;const m={toc:[{value:"Success",id:"success",level:4},{value:"Warning",id:"warning",level:4},{value:"Info",id:"info",level:4},{value:"Error",id:"error",level:4}]},v="wrapper";function b(e){let{components:n,...t}=e;return(0,o.kt)(v,(0,l.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"success"},"Success"),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-success",label:"Success variant",validation:{variant:"success",message:"Success unlocked. Keep soaring!"},mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-success\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="Success variant"\n    validation={{\n        variant: "success",\n        message: "Success unlocked. Keep soaring!"\n    }}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("h4",{id:"warning"},"Warning"),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-warning",label:"Warning variant",validation:{variant:"warning",message:"Caution: Proceed with care to avoid potential pitfalls."},mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-warning\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="Warning variant"\n    validation={{\n        variant: "warning",\n        message: "Caution: Proceed with care to avoid potential pitfalls."\n    }}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("h4",{id:"info"},"Info"),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-info",label:"Info variant",validation:{variant:"info",message:"Information: Knowledge is the key to empowerment."},mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-info\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="Info variant"\n    validation={{\n        variant: "info",\n        message: "Information: Knowledge is the key to empowerment."\n    }}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("h4",{id:"error"},"Error"),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-error",label:"Error variant",validation:{variant:"error",message:"Error: Unable to proceed without required input."},mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-error\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="Error variant"\n    validation={{\n        variant: "error",\n        message: "Error: Unable to proceed without required input."\n    }}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')))}b.isMDXComponent=!0;const h={id:{type:"string",description:"The id of the select element.",isRequired:!0},value:{type:["string","number","bool"],description:"The value of the select element.",isRequired:!0},onChange:{type:"function",description:"Callback function that is fired when the select value changes.",isRequired:!0},options:{type:"array",description:"Array of options to be rendered in the select element."},children:{type:"node",description:"Alternative to options array. Pass `Select.Option` components as children."},selectedLabel:{type:"string"},label:{type:"string"},labelProps:{type:"object"},labelSuffix:{type:"node"},disabled:{type:"bool",description:"If true, the select will be disabled.",defaultValue:"false"},validation:{type:"{ variant: string, message: node }",description:"Validation variant and message."},className:{type:"string"}},O={},g="Select",k={unversionedId:"elements/select",id:"elements/select",title:"Select",description:"A dropdown list for selecting a single item.",source:"@site/docs/elements/select.mdx",sourceDirName:"elements",slug:"/elements/select",permalink:"/npm-ui-component-library/docs/elements/select",draft:!1,editUrl:"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/elements/select.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Radio",permalink:"/npm-ui-component-library/docs/elements/radio"},next:{title:"Spinner",permalink:"/npm-ui-component-library/docs/elements/spinner"}},S={},y=[{value:"Usage",id:"usage",level:3},{value:"Options",id:"options",level:3},{value:"Label",id:"label",level:3},{value:"Disabled",id:"disabled",level:3},{value:"Validation",id:"validation",level:3},{value:"Props",id:"props",level:3}],f={toc:y},C="wrapper";function N(e){let{components:n,...t}=e;return(0,o.kt)(C,(0,l.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"select"},"Select"),(0,o.kt)("p",null,"A dropdown list for selecting a single item."),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo",mdxType:"SelectDemo"})),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Select } from "@newfold/ui-component-library";\n\n<Select\n    id=\'select-demo\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("p",null,"You can pass options to the Select component in two ways. You can\npass them as children of the Select component or you can\npass them as an array of objects to the options prop."),(0,o.kt)(u,{mdxType:"SelectOptions"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"label"},"Label"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," prop to add a label to the Select component."),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-label",label:"Select an option",mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-label\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="Select an option"\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"disabled"},"Disabled"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," prop to disable the Select component."),(0,o.kt)(s.Z,{mdxType:"NewfoldRoot"},(0,o.kt)(d,{id:"select-demo-disabled",label:"A disabled select",disabled:!0,mdxType:"SelectDemo"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Select\n    id=\'select-demo-disabled\'\n    onChange={handleChange}\n    value=\'1\'\n    selectedLabel=\'Option 1\'\n    label="A disabled select"\n    disabled={true}\n>\n    <Select.Option\n        label="Option 1"\n        value="1"\n    />\n    <Select.Option\n        label="Option 2"\n        value="2"\n    />\n    <Select.Option\n        label="Option 3"\n        value="3"\n    />\n    <Select.Option\n        label="Option 4"\n        value="4"\n    />\n</Select>\n')),(0,o.kt)("h3",{id:"validation"},"Validation"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"validation")," prop to render a validation variant to the Select component.\nThe select component provide four validation variants: ",(0,o.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,o.kt)(b,{mdxType:"SelectValidationVariants"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)(i.Z.Table,{docs:h}))}N.isMDXComponent=!0}}]);