"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[6233],{2504:(e,t,n)=>{n.d(t,{Z:()=>a});var l=n(7294);const o={Table:e=>{let{children:t,docs:n}=e;const a=[],p=()=>!!(n&&"object"==typeof n&&Object.keys(n).length>0);return l.createElement("div",{className:"props-table"},l.createElement("table",null,l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Attribute"),l.createElement("th",null,"Type"),l.createElement("th",null,"Description"),l.createElement("th",null,"Default"))),l.createElement("tbody",null,!t&&!p()&&l.createElement("div",{className:"empty-props"},"This component has no props."),(()=>{if(p())for(const e in n)if(n.hasOwnProperty(e)){const t=n[e];t.name=e,void 0===t.type&&(t.type=[]),void 0===t.description&&(t.description=""),void 0===t.defaultValue&&(t.defaultValue=""),void 0===t.isRequired&&(t.isRequired=!1),a.push(l.createElement(o.Row,{key:t.name,name:t.name,type:t.type,description:t.description,defaultValue:t.defaultValue,isRequired:t.isRequired}))}return a})(),t)))}};o.Row=e=>{let{name:t,type:n=[],description:o="-",defaultValue:a="-",isRequired:p=!1}=e;return t&&"string"==typeof t?l.createElement("tr",null,l.createElement("td",{className:"props-table-name-col"},"boolean"==typeof p&&p?l.createElement("span",{className:"required-prop"},t,l.createElement("sup",null,"*")):l.createElement("span",null,t)),l.createElement("td",{className:"props-table-types-col"},(()=>{let e=n;return"string"==typeof e&&(e=[e]),e.length>0?l.createElement(l.Fragment,null,e.map(((e,t)=>l.createElement(l.Fragment,{key:t},l.createElement("code",null,e),l.createElement("span",null," | "))))):l.createElement("span",null,"-")})()),l.createElement("td",{className:"props-table-description-col"},o&&"string"==typeof o&&""!==o?l.createElement("span",null,o):l.createElement("span",null,"-")),l.createElement("td",{className:"props-table-default-col"},a&&"string"==typeof a&&""!==a&&"-"!==a?l.createElement("code",null,a):l.createElement("span",null,"-"))):(console.warn("From: PropsTable.Row. Invalid prop name or missing required props: name."),null)};const a=o},6748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>A,frontMatter:()=>s,metadata:()=>h,toc:()=>b});var l=n(7462),o=n(7294),a=n(3905),p=n(1629),u=n(2504),c=n(1471);const i=[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}],r=e=>{let{label:t,selectedLabel:n="",placeholder:l="Type to autocomplete options",value:a="",nullable:p=!1}=e;const[u,r]=(0,o.useState)(a),[m,s]=(0,o.useState)(n),[d,h]=(0,o.useState)(i),g=(0,o.useRef)(!0);(0,o.useEffect)((()=>{g.current?g.current=!1:s(u?i.find((e=>e.value===u)).label:"")}),[u]);return o.createElement(c.Z,{id:"select-autocomplete",nullable:p,onChange:r,onQueryChange:e=>{const{value:t}=e.target;if(!t)return h(i);return h((()=>{if(i.length>0)return i.filter((e=>e.label.toLowerCase().includes(t.toLowerCase())))}))},placeholder:l,value:u,selectedLabel:m,label:t},d.map((e=>o.createElement(c.Z.Option,{key:e.value,value:e.value},e.label))))};const m={id:{type:"string",description:"HTML id attribute.",isRequired:!0},value:{type:["string","number","bool"]},placeholder:{type:"string"},children:{type:"node",description:"Pass `Autocomplete.Option` components as children"},selectedLabel:{type:"string",description:"The label of the selected option."},label:{type:"string",description:"The label of the autocomplete input."},labelProps:{type:"object"},labelSuffix:{type:"node"},onChange:{type:"function",description:"Callback function that is fired when an item has been selected.",isRequired:!0},onQueryChange:{type:"function",description:"Callback function that is fired when the query changes.",isRequired:!0},className:{type:"string"},nullable:{type:"bool",description:"If true, the user can clear the selected value with `X` button."},buttonProps:{type:"object",description:"Props to be passed to the `X` button element."},clearButtonScreenReaderText:{type:"string",description:"Screen reader text for the clear button.",defaultValue:"Clear"}},s={},d="Autocomplete",h={unversionedId:"elements/autocomplete",id:"elements/autocomplete",title:"Autocomplete",description:"A simple autocomplete select component.",source:"@site/docs/elements/autocomplete.mdx",sourceDirName:"elements",slug:"/elements/autocomplete",permalink:"/npm-ui-component-library/docs/elements/autocomplete",draft:!1,editUrl:"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/elements/autocomplete.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Alert",permalink:"/npm-ui-component-library/docs/elements/alert"},next:{title:"Badge",permalink:"/npm-ui-component-library/docs/elements/badge"}},g={},b=[{value:"Usage",id:"usage",level:3},{value:"Label",id:"label",level:3},{value:"Placeholder",id:"placeholder",level:3},{value:"Selected Label",id:"selected-label",level:3},{value:"Nullable",id:"nullable",level:3},{value:"onChange",id:"onchange",level:3},{value:"onQueryChange",id:"onquerychange",level:3},{value:"Props",id:"props",level:3}],v={toc:b},y="wrapper";function A(e){let{components:t,...n}=e;return(0,a.kt)(y,(0,l.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"autocomplete"},"Autocomplete"),(0,a.kt)("p",null,"A simple autocomplete select component."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{mdxType:"AutocompleteDemo"})),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Autocomplete } from "@newfold/ui-component-library";\n\n<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"label"},"Label"),(0,a.kt)("p",null,"An example with a label using ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n    label="Select an Option"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"placeholder"},"Placeholder"),(0,a.kt)("p",null,"An example with placeholder using ",(0,a.kt)("inlineCode",{parentName:"p"},"placeholder")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"A custom placeholder",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="A custom placeholder"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"selected-label"},"Selected Label"),(0,a.kt)("p",null,"An example with default value using ",(0,a.kt)("inlineCode",{parentName:"p"},"selectedLabel")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"A custom placeholder",selectedLabel:"Option 2",value:"2",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value="2"\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Option 2"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"nullable"},"Nullable"),(0,a.kt)("p",null,"Allow empty values with reset button ",(0,a.kt)("inlineCode",{parentName:"p"},"X")," or deleting the option and clicking outside the field."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"Type to autocomplete options",value:"2",selectedLabel:"Option 2",nullable:!0,mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"onchange"},"onChange"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," prop is a function that will be called when the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component changes.\nThe function will receive the new value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component as a parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={new_val => console.log(new_val)}\n    onQueryChange={handleQueryChange}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"onquerychange"},"onQueryChange"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onQueryChange")," prop is a function that will be called when the query of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component changes.\nThe function will receive the new query event of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component as a parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={(new_val) => console.log(new_val)}\n    onQueryChange={(event) => console.log(event.target.value)}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)(u.Z.Table,{docs:m}))}A.isMDXComponent=!0}}]);