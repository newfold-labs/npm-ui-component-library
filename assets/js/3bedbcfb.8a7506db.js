"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[6233],{6748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>s,default:()=>v,frontMatter:()=>d,metadata:()=>h,toc:()=>A});var o=n(7462),l=n(7294),a=n(3905),p=n(1629),u=n(2504),i=n(1471);const c=[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}],r=e=>{let{label:t,selectedLabel:n="",placeholder:o="Type to autocomplete options",value:a="",nullable:p=!1}=e;const[u,r]=(0,l.useState)(a),[m,d]=(0,l.useState)(n),[s,h]=(0,l.useState)(c),g=(0,l.useRef)(!0);(0,l.useEffect)((()=>{g.current?g.current=!1:d(u?c.find((e=>e.value===u)).label:"")}),[u]);return l.createElement(i.Z,{id:"select-autocomplete",nullable:p,onChange:r,onQueryChange:e=>{const{value:t}=e.target;if(!t)return h(c);return h((()=>{if(c.length>0)return c.filter((e=>e.label.toLowerCase().includes(t.toLowerCase())))}))},placeholder:o,value:u,selectedLabel:m,label:t},s.map((e=>l.createElement(i.Z.Option,{key:e.value,value:e.value},e.label))))};const m={id:{type:"string",description:"HTML id attribute.",isRequired:!0},value:{type:["string","number","bool"]},placeholder:{type:"string"},children:{type:"node",description:"Pass `Autocomplete.Option` components as children"},selectedLabel:{type:"string",description:"The label of the selected option."},label:{type:"string",description:"The label of the autocomplete input."},labelProps:{type:"object"},labelSuffix:{type:"node"},onChange:{type:"function",description:"Callback function that is fired when an item has been selected.",isRequired:!0},onQueryChange:{type:"function",description:"Callback function that is fired when the query changes.",isRequired:!0},className:{type:"string"},nullable:{type:"bool",description:"If true, the user can clear the selected value with `X` button."},buttonProps:{type:"object",description:"Props to be passed to the `X` button element."},clearButtonScreenReaderText:{type:"string",description:"Screen reader text for the clear button.",defaultValue:"Clear"}},d={},s="Autocomplete",h={unversionedId:"elements/autocomplete",id:"elements/autocomplete",title:"Autocomplete",description:"A simple autocomplete select component.",source:"@site/docs/elements/autocomplete.mdx",sourceDirName:"elements",slug:"/elements/autocomplete",permalink:"/npm-ui-component-library/docs/elements/autocomplete",draft:!1,editUrl:"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/elements/autocomplete.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Alert",permalink:"/npm-ui-component-library/docs/elements/alert"},next:{title:"Badge",permalink:"/npm-ui-component-library/docs/elements/badge"}},g={},A=[{value:"Usage",id:"usage",level:3},{value:"Label",id:"label",level:3},{value:"Placeholder",id:"placeholder",level:3},{value:"Selected Label",id:"selected-label",level:3},{value:"Nullable",id:"nullable",level:3},{value:"onChange",id:"onchange",level:3},{value:"onQueryChange",id:"onquerychange",level:3},{value:"Props",id:"props",level:3}],O={toc:A},b="wrapper";function v(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,o.Z)({},O,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"autocomplete"},"Autocomplete"),(0,a.kt)("p",null,"A simple autocomplete select component."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{mdxType:"AutocompleteDemo"})),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Autocomplete } from "@newfold/ui-component-library";\n\n<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"label"},"Label"),(0,a.kt)("p",null,"An example with a label using ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n    label="Select an Option"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"placeholder"},"Placeholder"),(0,a.kt)("p",null,"An example with placeholder using ",(0,a.kt)("inlineCode",{parentName:"p"},"placeholder")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"A custom placeholder",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="A custom placeholder"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"selected-label"},"Selected Label"),(0,a.kt)("p",null,"An example with default value using ",(0,a.kt)("inlineCode",{parentName:"p"},"selectedLabel")," prop."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"A custom placeholder",selectedLabel:"Option 2",value:"2",mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value="2"\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Option 2"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"nullable"},"Nullable"),(0,a.kt)("p",null,"Allow empty values with reset button ",(0,a.kt)("inlineCode",{parentName:"p"},"X")," or deleting the option and clicking outside the field."),(0,a.kt)(p.Z,{mdxType:"NewfoldRoot"},(0,a.kt)(r,{label:"Select an Option",placeholder:"Type to autocomplete options",value:"2",selectedLabel:"Option 2",nullable:!0,mdxType:"AutocompleteDemo"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"onchange"},"onChange"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," prop is a function that will be called when the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component changes.\nThe function will receive the new value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component as a parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={new_val => console.log(new_val)}\n    onQueryChange={handleQueryChange}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"onquerychange"},"onQueryChange"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onQueryChange")," prop is a function that will be called when the query of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component changes.\nThe function will receive the new query event of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autocomplete")," component as a parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={(new_val) => console.log(new_val)}\n    onQueryChange={(event) => console.log(event.target.value)}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)(u.Z.Table,{docs:m}))}v.isMDXComponent=!0}}]);