"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[1544],{2658:(e,t,n)=>{n.d(t,{$Q:()=>p,wq:()=>d,jt:()=>m});var o=n(7294),l=n(1471);const a=[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}],p=e=>{let{label:t,selectedLabel:n="",placeholder:p="Type to autocomplete options",nullable:i=!1,validation:u}=e;const[c,r]=(0,o.useState)(null),[s,d]=(0,o.useState)(a);return o.createElement(l.Z,{id:"select-autocomplete",nullable:i,onChange:e=>r(e),onQueryChange:e=>{const{value:t}=e.target;if(!t)return d(a);return d((()=>{if(a.length>0)return a.filter((e=>e.label.toLowerCase().includes(t.toLowerCase())))}))},placeholder:p,value:c,selectedLabel:c?a.find((e=>e.value===c)).label:n,label:t,validation:u},s.map((e=>o.createElement(l.Z.Option,{key:e.value,value:e.value},e.label))))};var i=n(7462),u=n(3905),c=n(1629);const r={toc:[{value:"Success",id:"success",level:4},{value:"Warning",id:"warning",level:4},{value:"Info",id:"info",level:4},{value:"Error",id:"error",level:4}]},s="wrapper";function d(e){let{components:t,...n}=e;return(0,u.kt)(s,(0,i.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h4",{id:"success"},"Success"),(0,u.kt)(c.Z,{mdxType:"NewfoldRoot"},(0,u.kt)(p,{label:"With validation of variant success",selectedLabel:"Success unlocked. Keep soaring!",validation:{variant:"success",message:"Success unlocked. Keep soaring!"},mdxType:"AutocompleteDemo"})),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="With validation of variant success"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Success unlocked. Keep soaring!"\n    validation={{ \n        variant: "success", \n        message: "Success unlocked. Keep soaring!\'"\n    }}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,u.kt)("h4",{id:"warning"},"Warning"),(0,u.kt)(c.Z,{mdxType:"NewfoldRoot"},(0,u.kt)(p,{label:"With validation of variant warning",selectedLabel:"Caution: Proceed with care to avoid potential pitfalls.",validation:{variant:"warning",message:"Caution: Proceed with care to avoid potential pitfalls."},mdxType:"AutocompleteDemo"})),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="With validation of variant warning"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Caution: Proceed with care to avoid potential pitfalls."\n    validation={{ \n        variant: "warning", \n        message: "Caution: Proceed with care to avoid potential pitfalls."\n    }}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,u.kt)("h4",{id:"info"},"Info"),(0,u.kt)(c.Z,{mdxType:"NewfoldRoot"},(0,u.kt)(p,{label:"With validation of variant info",selectedLabel:"Information: Knowledge is the key to empowerment.",validation:{variant:"info",message:"Information: Knowledge is the key to empowerment."},mdxType:"AutocompleteDemo"})),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="With validation of variant info"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Information: Knowledge is the key to empowerment."\n    validation={{ \n        variant: "info", \n        message: "Information: Knowledge is the key to empowerment." \n    }}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,u.kt)("h4",{id:"error"},"Error"),(0,u.kt)(c.Z,{mdxType:"NewfoldRoot"},(0,u.kt)(p,{label:"With validation of variant error",selectedLabel:"Error: Connection lost. Please reconnect.",validation:{variant:"error",message:"Error: Connection lost. Please reconnect."},mdxType:"AutocompleteDemo"})),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="With validation of variant error"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Error: Connection lost. Please reconnect."\n    validation={{ \n        variant: "error", \n        message: "Error: Connection lost. Please reconnect." \n    }}\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')))}d.isMDXComponent=!0;const m={id:{type:"string",description:"HTML id attribute.",isRequired:!0},value:{type:["string","number","bool"]},placeholder:{type:"string"},children:{type:"node",description:"Pass `Autocomplete.Option` components as children"},selectedLabel:{type:"string",description:"The label of the selected option."},label:{type:"string",description:"The label of the autocomplete input."},labelProps:{type:"object"},labelSuffix:{type:"node"},onChange:{type:"function",description:"Callback function that is fired when an item has been selected.",isRequired:!0},onQueryChange:{type:"function",description:"Callback function that is fired when the query changes.",isRequired:!0},className:{type:"string"},nullable:{type:"bool",description:"If true, the user can clear the selected value with `X` button."},buttonProps:{type:"object",description:"Props to be passed to the `X` button element."},clearButtonScreenReaderText:{type:"string",description:"Screen reader text for the clear button.",defaultValue:"Clear"}}},4906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>b,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var o=n(7462),l=(n(7294),n(3905)),a=n(1629),p=n(2504),i=n(2658),u=n(614);const c='import React from "react";\nimport { useState } from "@wordpress/element";\nimport { Autocomplete } from "@newfold/ui-component-library";\n\nconst options = [\n    {\n        value: "1",\n        label: "Option 1",\n    },\n    {\n        value: "2",\n        label: "Option 2",\n    },\n    {\n        value: "3",\n        label: "Option 3",\n    },\n];\n\nconst AutocompleteDemo = ({\n    label,\n    selectedLabel = "",\n    placeholder = "Type to autocomplete options",\n    nullable = false,\n    validation\n}) => {\n    const [selectedVal, setSelectedVal] = useState(null);\n    const [query, setQuery] = useState(options);\n\n    const getSelectedLabel = () => options.find(option => option.value === selectedVal).label;\n\n    const handleQueryChange = (event) => {\n        const { value } = event.target;\n\n        if (!value) {\n            return setQuery(options);\n        }\n\n        const filteredOptions = () => {\n            if (options.length > 0) {\n                return options.filter((option) => option.label.toLowerCase().includes(value.toLowerCase()));\n            }\n        }\n        \n        return setQuery(filteredOptions);\n    };\n\n    return (\n        <Autocomplete\n            id="select-autocomplete"\n            nullable={nullable}\n            onChange={(value) => setSelectedVal(value)}\n            onQueryChange={handleQueryChange}\n            placeholder={placeholder}\n            value={selectedVal}\n            selectedLabel={selectedVal ? getSelectedLabel() : selectedLabel}\n            label={label}\n            validation={validation}\n        >\n\n            {query.map((option) => (\n                <Autocomplete.Option key={option.value} value={option.value}>\n                    {option.label}\n                </Autocomplete.Option>\n            ))}\n\n        </Autocomplete>\n    );\n}\n\nexport default AutocompleteDemo;\n',r={},s="Autocomplete",d={unversionedId:"components/autocomplete-field",id:"components/autocomplete-field",title:"Autocomplete",description:"A simple autocomplete select component.",source:"@site/docs/components/autocomplete-field.mdx",sourceDirName:"components",slug:"/components/autocomplete-field",permalink:"/npm-ui-component-library/docs/components/autocomplete-field",draft:!1,editUrl:"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/components/autocomplete-field.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Components",permalink:"/npm-ui-component-library/docs/category/components"},next:{title:"Card",permalink:"/npm-ui-component-library/docs/components/card"}},m={},h=[{value:"Usage",id:"usage",level:3},{value:"Label",id:"label",level:3},{value:"Placeholder",id:"placeholder",level:3},{value:"Selected Label",id:"selected-label",level:3},{value:"Nullable",id:"nullable",level:3},{value:"Validation",id:"validation",level:3},{value:"Props",id:"props",level:3}],v={toc:h},g="wrapper";function b(e){let{components:t,...n}=e;return(0,l.kt)(g,(0,o.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"autocomplete"},"Autocomplete"),(0,l.kt)("p",null,"A simple autocomplete select component."),(0,l.kt)(a.Z,{mdxType:"NewfoldRoot"},(0,l.kt)(i.$Q,{mdxType:"AutocompleteDemo"})),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)(u.Z,{language:"jsx",mdxType:"CodeBlock"},c),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"label"},"Label"),(0,l.kt)("p",null,"An example with a label using ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," prop."),(0,l.kt)(a.Z,{mdxType:"NewfoldRoot"},(0,l.kt)(i.$Q,{label:"Select an Option",mdxType:"AutocompleteDemo"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    placeholder="Type to autocomplete options"\n    value=""\n    label="Select an Option"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"placeholder"},"Placeholder"),(0,l.kt)("p",null,"An example with placeholder using ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," prop."),(0,l.kt)(a.Z,{mdxType:"NewfoldRoot"},(0,l.kt)(i.$Q,{label:"Select an Option",placeholder:"A custom placeholder",mdxType:"AutocompleteDemo"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="A custom placeholder"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"selected-label"},"Selected Label"),(0,l.kt)("p",null,"An example with default value using ",(0,l.kt)("inlineCode",{parentName:"p"},"selectedLabel")," prop."),(0,l.kt)(a.Z,{mdxType:"NewfoldRoot"},(0,l.kt)(i.$Q,{label:"Select an Option",placeholder:"A custom placeholder",selectedLabel:"Option 2",value:"2",mdxType:"AutocompleteDemo"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value="2"\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel="Option 2"\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"nullable"},"Nullable"),(0,l.kt)("p",null,"Allow empty values with reset button ",(0,l.kt)("inlineCode",{parentName:"p"},"X")," or deleting the option and clicking outside the field."),(0,l.kt)(a.Z,{mdxType:"NewfoldRoot"},(0,l.kt)(i.$Q,{label:"Select an Option",placeholder:"Type to autocomplete options",nullable:!0,mdxType:"AutocompleteDemo"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Autocomplete\n    id="autocomplete-input"\n    onChange={handleChange}\n    onQueryChange={handleQueryChange}\n    value=""\n    label="Select an Option"\n    placeholder="Type to autocomplete options"\n    selectedLabel=""\n>\n    <Autocomplete.Option value="1">\n        Option 1\n    </Autocomplete.Option>\n    <Autocomplete.Option value="2">\n        Option 2\n    </Autocomplete.Option>\n    <Autocomplete.Option value="3">\n        Option 3\n    </Autocomplete.Option>\n</Autocomplete>\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"validation"},"Validation"),(0,l.kt)(i.wq,{mdxType:"AutocompleteValidationVariants"}),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"props"},"Props"),(0,l.kt)(p.Z.Table,{docs:{children:{type:"Autocomplete.Option"},className:{type:"string",description:"Class attribute to add to the element",defaultValue:'""'},description:{type:"string",description:"Form element description for whole checkbox group",defaultValue:'""'},placeholder:{type:"string",description:"Placeholder text"},id:{type:"string",description:"Element id attribute",defaultValue:'""'},label:{type:"string",description:"Label for form element",defaultValue:'""'},name:{type:"string",description:"Element name",defaultValue:'""'},validation:{type:"Array of values",description:"Desired selected values matching the values of the options"}}}))}b.isMDXComponent=!0}}]);