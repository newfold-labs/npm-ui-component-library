"use strict";(self.webpackChunknewfold_ui_docs=self.webpackChunknewfold_ui_docs||[]).push([[9563],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>y});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?n.createElement(y,i(i({ref:r},l),{},{components:t})):n.createElement(y,i({ref:r},l))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var u={};for(var s in r)hasOwnProperty.call(r,s)&&(u[s]=r[s]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5582:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));const a={},i="useMediaQuery",u={unversionedId:"hooks/useMediaQuery",id:"hooks/useMediaQuery",title:"useMediaQuery",description:"The useMediaQuery hook generates a media query and provides a boolean value",source:"@site/docs/hooks/useMediaQuery.mdx",sourceDirName:"hooks",slug:"/hooks/useMediaQuery",permalink:"/npm-ui-component-library/docs/hooks/useMediaQuery",draft:!1,editUrl:"https://github.com/newfold-labs/npm-ui-component-library/docs/docs/hooks/useMediaQuery.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"useDescribedBy",permalink:"/npm-ui-component-library/docs/hooks/useDescribedBy"},next:{title:"usePrevious",permalink:"/npm-ui-component-library/docs/hooks/usePrevious"}},s={},c=[{value:"Usage",id:"usage",level:3}],l={toc:c},p="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usemediaquery"},"useMediaQuery"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," hook generates a media query and provides a boolean value\nindicating whether the specified query conditions are met."),(0,o.kt)("p",null,"It accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"mediaQueryString")," parameter (string), which is the media query to\nbe evaluated. The hook returns an object containing a ",(0,o.kt)("inlineCode",{parentName:"p"},".matches")," field that is set\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the media query conditions are met."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useMediaQuery } from from "@newfold/ui-component-library";\n\nconst Component = () => {\n    const isSingleColumn = ! useMediaQuery( "(min-width: 1536px)" ).matches;\n\n    return (\n        // JSX...\n    );\n};\n')))}d.isMDXComponent=!0}}]);